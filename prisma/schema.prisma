generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contact {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  email           String?           @db.VarChar(255)
  phone           String?           @db.VarChar(255)
  user_id         String            @db.Uuid
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  user            user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  gift_suggestion gift_suggestion[]
  meeting         meeting[]
  note            note[]
}

model event {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String   @db.VarChar(255)
  date               DateTime @db.Date
  reminder_frequency Int?
  user_id            String   @db.Uuid
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)
  user               user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model gift_suggestion {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contact_id String   @db.Uuid
  suggestion String   @db.VarChar(255)
  accepted   Boolean?
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  contact    contact  @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model meeting {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contact_id        String    @db.Uuid
  frequency         Int
  last_meeting_date DateTime? @db.Date
  user_id           String    @db.Uuid
  created_at        DateTime  @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  contact           contact   @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model note {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  contact_id String   @db.Uuid
  content    String   @db.VarChar(255)
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  contact    contact  @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar
  image       String?  @db.VarChar
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  firstName       String?           @db.VarChar(255)
  lastName        String?           @db.VarChar(255)
  roq_user_id     String            @db.VarChar(255)
  tenant_id       String            @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  contact         contact[]
  event           event[]
  gift_suggestion gift_suggestion[]
  meeting         meeting[]
  note            note[]
  organization    organization[]
}
